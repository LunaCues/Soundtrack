/*
 * GenerateMyLibraryWindowsView.java
 */

package generatemylibrarywindows;

import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 * The application's main frame.
 */
public class GenerateMyLibraryWindowsView extends FrameView {

    private boolean enableJunc = true;
    private File curAddDir;
    private Junction junction;
    private Soundtrack soundtrack;

    public GenerateMyLibraryWindowsView(SingleFrameApplication app) throws Exception {
        super(app);

        initComponents();
        soundtrack = new Soundtrack(GMLTextArea);
        junction = new Junction(GMLTextArea);

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String)(evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer)(evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
        });

        JOptionPane.showMessageDialog(Options, "Welcome to GenerateMyLibraryWindows!\n\n" +
                "Junctions enabled.  Click Options > Enable Junctions to change.\n" +
                "Click Help for more information about Junctions.\n\n" +
                "If you have a problem, leave a comment at\n" +
                "http://wow.curse.com/downloads/wow-addons/details/soundtrack.aspx");
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = GenerateMyLibraryWindowsApp.getApplication().getMainFrame();
            aboutBox = new GenerateMyLibraryWindowsAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        GenerateMyLibraryWindowsApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        GMLTextArea = new javax.swing.JTextArea();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        Options = new javax.swing.JMenu();
        EnableJunctions = new javax.swing.JCheckBoxMenuItem();
        jSeparator4 = new javax.swing.JSeparator();
        AddFile = new javax.swing.JMenuItem();
        AddFolder = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        DeleteFile = new javax.swing.JMenuItem();
        DeleteFolder = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        CreateSoundtrackMusic = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JSeparator();
        GenerateMyLibrary = new javax.swing.JMenuItem();
        GenMyLibErrors = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();

        mainPanel.setName("mainPanel"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        GMLTextArea.setColumns(20);
        GMLTextArea.setEditable(false);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(generatemylibrarywindows.GenerateMyLibraryWindowsApp.class).getContext().getResourceMap(GenerateMyLibraryWindowsView.class);
        GMLTextArea.setFont(resourceMap.getFont("GMLTextArea.font")); // NOI18N
        GMLTextArea.setRows(5);
        GMLTextArea.setName("GMLTextArea"); // NOI18N
        jScrollPane1.setViewportView(GMLTextArea);

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 428, Short.MAX_VALUE)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(generatemylibrarywindows.GenerateMyLibraryWindowsApp.class).getContext().getActionMap(GenerateMyLibraryWindowsView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        Options.setText(resourceMap.getString("Options.text")); // NOI18N
        Options.setName("Options"); // NOI18N

        EnableJunctions.setSelected(true);
        EnableJunctions.setText(resourceMap.getString("EnableJunctions.text")); // NOI18N
        EnableJunctions.setName("EnableJunctions"); // NOI18N
        EnableJunctions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EnableJunctionsActionPerformed(evt);
            }
        });
        Options.add(EnableJunctions);

        jSeparator4.setName("jSeparator4"); // NOI18N
        Options.add(jSeparator4);

        AddFile.setIcon(resourceMap.getIcon("AddFile.icon")); // NOI18N
        AddFile.setText(resourceMap.getString("AddFile.text")); // NOI18N
        AddFile.setName("AddFile"); // NOI18N
        AddFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddFileActionPerformed(evt);
            }
        });
        Options.add(AddFile);

        AddFolder.setIcon(resourceMap.getIcon("AddFolder.icon")); // NOI18N
        AddFolder.setText(resourceMap.getString("AddFolder.text")); // NOI18N
        AddFolder.setName("AddFolder"); // NOI18N
        AddFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddFolderActionPerformed(evt);
            }
        });
        Options.add(AddFolder);

        jSeparator1.setName("jSeparator1"); // NOI18N
        Options.add(jSeparator1);

        DeleteFile.setIcon(resourceMap.getIcon("DeleteFile.icon")); // NOI18N
        DeleteFile.setText(resourceMap.getString("DeleteFile.text")); // NOI18N
        DeleteFile.setName("DeleteFile"); // NOI18N
        DeleteFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteFileActionPerformed(evt);
            }
        });
        Options.add(DeleteFile);

        DeleteFolder.setIcon(resourceMap.getIcon("DeleteFolder.icon")); // NOI18N
        DeleteFolder.setText(resourceMap.getString("DeleteFolder.text")); // NOI18N
        DeleteFolder.setName("DeleteFolder"); // NOI18N
        DeleteFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteFolderActionPerformed(evt);
            }
        });
        Options.add(DeleteFolder);

        jSeparator2.setName("jSeparator2"); // NOI18N
        Options.add(jSeparator2);

        CreateSoundtrackMusic.setIcon(resourceMap.getIcon("CreateSoundtrackMusic.icon")); // NOI18N
        CreateSoundtrackMusic.setText(resourceMap.getString("CreateSoundtrackMusic.text")); // NOI18N
        CreateSoundtrackMusic.setName("CreateSoundtrackMusic"); // NOI18N
        CreateSoundtrackMusic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateSoundtrackMusicActionPerformed(evt);
            }
        });
        Options.add(CreateSoundtrackMusic);

        jSeparator3.setName("jSeparator3"); // NOI18N
        Options.add(jSeparator3);

        GenerateMyLibrary.setIcon(resourceMap.getIcon("GenerateMyLibrary.icon")); // NOI18N
        GenerateMyLibrary.setText(resourceMap.getString("GenerateMyLibrary.text")); // NOI18N
        GenerateMyLibrary.setName("GenerateMyLibrary"); // NOI18N
        GenerateMyLibrary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenerateMyLibraryActionPerformed(evt);
            }
        });
        Options.add(GenerateMyLibrary);

        GenMyLibErrors.setText(resourceMap.getString("GenMyLibErrors.text")); // NOI18N
        GenMyLibErrors.setName("GenMyLibErrors"); // NOI18N
        GenMyLibErrors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenMyLibErrorsActionPerformed(evt);
            }
        });
        Options.add(GenMyLibErrors);

        menuBar.add(Options);
        Options.getAccessibleContext().setAccessibleName(resourceMap.getString("jMenu1.AccessibleContext.accessibleName")); // NOI18N

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        jMenuItem1.setText(resourceMap.getString("jMenuItem1.text")); // NOI18N
        jMenuItem1.setName("jMenuItem1"); // NOI18N
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        helpMenu.add(jMenuItem1);

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setName("statusPanel"); // NOI18N

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 428, Short.MAX_VALUE)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusMessageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 258, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusAnimationLabel)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusMessageLabel)
                    .addComponent(statusAnimationLabel)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3))
        );

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents

    private void GenerateMyLibraryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenerateMyLibraryActionPerformed
        GenerateMyLibrary.setEnabled(false);
        soundtrack.generateMyLibrary();
        GenerateMyLibrary.setEnabled(true);
    }//GEN-LAST:event_GenerateMyLibraryActionPerformed

    private void AddFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddFileActionPerformed
        JFileChooser jf = new JFileChooser();
        jf.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        jf.setMultiSelectionEnabled(true);
        if(curAddDir == null){
            jf.setCurrentDirectory(curAddDir);
        }
        int returnVal = jf.showOpenDialog(GMLTextArea);
        curAddDir = jf.getCurrentDirectory();
        File[] files = jf.getSelectedFiles();
        if (files.length == 0) {
            soundtrack.log("No files selected.");
        }

        soundtrack.resetCounts();
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            for (int i = 0; i < files.length; i++){
                File f = files[i];
                String srcpath = f.getPath();
                String musFileName = f.getName();
                String destpath = soundtrack.getMusicDir().getPath() + "\\" + musFileName;
                soundtrack.addFiles(srcpath, destpath);
            }
        }
    }//GEN-LAST:event_AddFileActionPerformed

    private void AddFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddFolderActionPerformed
        JFileChooser jf = new JFileChooser();
        jf.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        jf.setMultiSelectionEnabled(true);
        if(curAddDir == null){
            jf.setCurrentDirectory(curAddDir);
        }
        int returnVal = jf.showOpenDialog(GMLTextArea);
        curAddDir = jf.getCurrentDirectory();
        File[] files = jf.getSelectedFiles();
        if(files.length == 0) {
            soundtrack.log("No folders selected");
        }

        soundtrack.resetCounts();
        int junccount = 0;
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            if(enableJunc){  // Create junctions to each folder
                try {
                    for(int i=0; i < files.length; i++){
                        File destf = new File(soundtrack.getMusicDir() + "\\" + files[i].getName());
                        String linkname = destf.getParentFile() + "\\j-" + destf.getName();
                        soundtrack.log("Creating junction to "+files[i].getPath());
                        junction.createlink(linkname, files[i].getPath());
                        junccount++;
                    }
                } catch (IOException ex) {
                    Logger.getLogger(GenerateMyLibraryWindowsView.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (junccount == 1){
                    soundtrack.log(junccount+" junction added.");
                } else {
                    soundtrack.log(junccount+" junctions added.");
                }
            } else {
                for (int i = 0; i < files.length; i++){
                    File f = files[i];
                    String psrcpath = f.getPath();
                    String musDirName = f.getName();
                    String destpath = soundtrack.getMusicDir().getPath() + "\\" + musDirName;
                    soundtrack.addFiles(psrcpath, destpath);
                }
            }
        }
    }//GEN-LAST:event_AddFolderActionPerformed

    private void DeleteFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteFileActionPerformed
        JFileChooser jf = new JFileChooser();
        jf.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        jf.setMultiSelectionEnabled(true);
        jf.setCurrentDirectory(soundtrack.getMusicDir());
        int returnVal = jf.showOpenDialog(GMLTextArea);
        File[] files = jf.getSelectedFiles();

        soundtrack.resetCounts();
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            for (int i = 0; i < files.length; i++){
                File f = files[i];
                String musFileName = f.getName();
                String destpath = soundtrack.getMusicDir().getPath() + "\\" + musFileName;
                soundtrack.deleteFiles(destpath);
            }
        }
    }//GEN-LAST:event_DeleteFileActionPerformed

    private void DeleteFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteFolderActionPerformed
        JFileChooser jf = new JFileChooser();
        jf.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        jf.setMultiSelectionEnabled(true);
        jf.setCurrentDirectory(soundtrack.getMusicDir());
        int returnVal = jf.showOpenDialog(GMLTextArea);
        File[] files = jf.getSelectedFiles();

        soundtrack.resetCounts();
        int junccount = 0;
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            for (int i = 0; i < files.length; i++){
                if(files[i].getName().contains("j-") || files[i].getName().contains("junction-")){
                    boolean deleted = files[i].delete();
                    junccount++;
                } else{
                    File f = files[i];
                    String musDirName = f.getName();
                    File destpath;
                    destpath = new File(soundtrack.getMusicDir().getPath() + "\\" + musDirName);
                    soundtrack.deleteFiles(destpath.getPath());
                    destpath.delete();
                }
            }
        }
    }//GEN-LAST:event_DeleteFolderActionPerformed

    private void CreateSoundtrackMusicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateSoundtrackMusicActionPerformed
        soundtrack.addFiles(soundtrack.getAddonDir().getPath() + "\\SoundtrackMusic", soundtrack.getMusicDir().getPath());
    }//GEN-LAST:event_CreateSoundtrackMusicActionPerformed

    private void EnableJunctionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EnableJunctionsActionPerformed
        if(EnableJunctions.isSelected()){
                enableJunc = true;
        } else {
            enableJunc = false;
        }
    }//GEN-LAST:event_EnableJunctionsActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        JOptionPane.showMessageDialog(Options,
            "Junctions create a link (NTFS Junction Point) from one folder to another folder.\n\n" +
            "To delete a junction, go to SoundtrackMusic and manually delete it.\n\n" +
            "WARNING: When deleteing a Junction Point or a folder containing a Junction Point\n" +
            "in Windows XP, ALWAYS use Shift+Del to safely delete the link. If not, it is\n" +
            "possible to delete the linked folder, and thus the music inside of the folder.\n\n" +
            "For more information, see:\n" +
            "http://en.wikipedia.org/wiki/NTFS_junction_point",
            "About Junctions", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void GenMyLibErrorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenMyLibErrorsActionPerformed
        soundtrack.getGenMyLibErrors();
    }//GEN-LAST:event_GenMyLibErrorsActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AddFile;
    private javax.swing.JMenuItem AddFolder;
    private javax.swing.JMenuItem CreateSoundtrackMusic;
    private javax.swing.JMenuItem DeleteFile;
    private javax.swing.JMenuItem DeleteFolder;
    private javax.swing.JCheckBoxMenuItem EnableJunctions;
    private javax.swing.JTextArea GMLTextArea;
    private javax.swing.JMenuItem GenMyLibErrors;
    private javax.swing.JMenuItem GenerateMyLibrary;
    private javax.swing.JMenu Options;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    // End of variables declaration//GEN-END:variables

    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;

    private JDialog aboutBox;
}
